use std::fmt::Display;

#[derive(Debug)]
pub enum Statement {
    Let(Identifier, Expression),
    If(Expression, Box<Statement>, Box<Statement>),
    Return(Expression),
    Expression(Expression),
}

#[derive(Debug)]
pub enum Expression {
    Variable(String),
    IntLiteral(i32),
    Binary(BinaryOperator, Box<Expression>, Box<Expression>),
    Grouped(Box<Expression>),
}

#[derive(Debug)]
pub enum BinaryOperator {
    Add,
    Subtract,
}

#[derive(Debug)]
pub struct Identifier {
    pub name: String,
}

#[derive(Debug)]
pub struct Program {
    pub statements: Vec<Statement>,
}

impl Display for Program {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let strings = self
            .statements
            .iter()
            .map(|self: Self| -> String { write!("{self}\n") });
        write!("Program")
    }
}
